r1 = 1  # row index
r2 = user[1] # max rows
r2 = r2 * 2
r10 = 0  # number of correct rows
while r1 <= r2:  # 2 * number of rows
    r3 = load_data(r1)  # length of row - 1
    r4 = check_row(1, r3)  # start index is 1, last index r3
    if r4 == 0:
        r3 = 16 - r3  # start index of reversed row
        r4 = check_row(r3, 16)
    r10 = r10 + r4
    r1 = r1 + 2
nop
disp[1] = r10
exit(success)

def check_row(r1, r2):
    # r1: start, r2: end address of the row
    # can use regs r1-r9
    r2 = r2 + 1
    r3 = mem[r1 + 1] # first number,  but swapped to save one mem instruction
    r4 = mem[r1] # second number
    r5 = 1  # 1: can remove one number, 0: cannot remove one number
    if r3 == r4:
        # assumption that first 2 numbers are correct is violated -> direct game over. Will check in the reverse path
        return 0
    r6 = r3 - r4
    if r6 > 3:
        return 0
    if r6 < -3:
        return 0
    if r3 > r4: # monotonic increase
        r1 = r1 + 2 # first two numbers already loaded in, load in the second
        r4 = mem[r1]
        while r1 < r2:
            r6 = r4 - r3  # check for error in difference r6
            r7 = 0
            r8 = 0
            r7 = 1 if r6 < 1
            r8 = 1 if r6 > 3
            r7 = r7 | r8  # r7 is 1 if there is a mistake, otherwise 0
            if r7 == 1:
                # mistake branch
                r5 = r5 - 1 # lost a live
                if r5 < 0:
                    # game over
                    return 0
                # dont use last number in r4, keep number in r3
                r4 = mem[r1 + 1]
            else:
                # correct branch, use both numbers
                r3 = r4
                r4 = mem[r1 + 1] # will load random stuff in last iteration, but thats ok, we dont use it
            r1 = r1 + 1
    else:  # monotonic decrease
        r1 = r1 + 2 # first two numbers already loaded in, load in the second
        r4 = mem[r1]
        while r1 < r2:
            r6 = r3 - r4  # check for error in difference r6
            r7 = 0
            r8 = 0
            r7 = 1 if r6 < 1
            r8 = 1 if r6 > 3
            r7 = r7 | r8  # r7 is 1 if there is a mistake, otherwise 0
            if r7 == 1:
                # mistake branch
                r5 = r5 - 1 # lost a live
                if r5 < 0:
                    # game over
                    return 0
                # dont use last number in r4, keep number in r3
                r4 = mem[r1 + 1]
            else:
                # correct branch, use both numbers
                r3 = r4
                r4 = mem[r1 + 1] # will load random stuff in last iteration, but thats ok, we dont use it
            r1 = r1 + 1
    nop
    # test passed
    return 1

def load_data(r1):
    r2 = rom[r1]
    r4 = 0
    while r4 < 4:
        r3 = r2 & 127
        r2 = r2 >> 7
        mem[r4 + 1] = r3
        r5 = 16 - r4  # reversed list
        mem[r5] = r3
        r4 = r4 + 1
    r2 = rom[r1 + 1]
    while r4 < 8:
        r3 = r2 & 127
        r2 = r2 >> 7
        if r3 == 0:
            jump(end_parse)
        mem[r4 + 1] = r3
        r5 = 16 - r4
        mem[r5] = r3
        r4 = r4 + 1
    nop
    &end_parse r2 = r4 - 1 # want row length -1
    return r2


