r10 = user[1]   # length of the list
r1 = load_data(r10)
r8 = 1
r9 = r10
r7 = 1
r1 = quick_sort(r8, r9)
r8 = r10 + 1
r9 = r10 * 2
r1 = quick_sort(r8, r9)
# compare and get sum
r8 = 1
r9 = r10 + 1
r3 = 0
r4 = 0 # acc
while r8 <= r10:
    r1 = mem[r8]
    r2 = mem[r9]
    if r1 >= r2:
        r3 = r1 - r2
    else:
        r3 = r2 - r1
    r4 = r4 + r3
    r8 = r8 + 1
    r9 = r9 + 1
disp[2] = r4
exit(success)

def load_data(r1):
    r2 = 1
    while r2 <= r1:
        r3 = r2 * 2
        r4 = rom[r3 - 1]
        mem[r2] = r4
        r4 = rom[r3]
        r5 = r2 + r1
        mem[r5] = r4
        r2 = r2 + 1
    return r1

def quick_sort(r1, r2):
    if r1 < r2:
        # partition
        r4 = mem[r2]  # r4 = pivot
        r3 = r1 - 1  # r3 = i index,
        r5 = r1  # r5 = j index
        while r5 < r2:
            r7 = mem[r5]
            if r7 <= r4:
                r3 = r3 + 1
                # swap
                r6 = mem[r3]
                mem[r3] = r7
                mem[r5] = r6
            r5 = r5 + 1
        r3 = r3 + 1
        r6 = mem[r3]
        mem[r2] = r6
        mem[r3] = r4
        r3 = r3 - 1
        r4 = quick_sort(r1, r3)
        r3 = r3 + 2
        r4 = quick_sort(r3, r2)
    return r1



