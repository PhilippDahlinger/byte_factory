r10 = load_data()
# disp[1] = 1
r8 = 1
r9 = r10
r1 = quick_sort(r8, r9)
# disp[1] = 2
r8 = r10 + 1
r9 = r10 * 2
r1 = quick_sort(r8, r9)
# disp[1] = 3
# compare and get sum
r8 = 1
r9 = r10 + 1
r3 = 0
r4 = 0 # acc
while r8 <= r10:
    r1 = mem[r8]
    r2 = mem[r9]
    if r1 >= r2:
        r3 = r1 - r2
    else:
        r3 = r2 - r1
    r4 = r4 + r3
    r8 = r8 + 1
    r9 = r9 + 1
disp[2] = r4
exit(success)

def load_data():
    r1 = 1
    r4 = 0
    r6 = 1  # flip between list 0 =1 and list 1 =-1
    r7 = 1
    r8 = 7
    r9 = -1
    while r10 == 0:
        r2 = rom[r1]
        while r4 < 7:
            r3 = r2 & 15
            if r3 == 15:
                # end of file
                jump(endoffile)
            r2 = r2 >> 4
            if r3 < 10:
                if r6 == 1:
                    mem[r7] = r3
                    r7 = r7 + 1
                else:
                    mem[r8] = r3
                    r8 = r8 + 1
                r6 = r6 * r9
            r4 = r4 + 1
        r1 = r1 + 1
        r4 = 0
    &endoffile r7 = r7 - 1
    return r7

def quick_sort(r1, r2):
    if r1 < r2:
        # partition
        r4 = mem[r2]  # r4 = pivot
        r3 = r1 - 1  # r3 = i index,
        r5 = r1  # r5 = j index
        while r5 < r2:
            r7 = mem[r5]
            if r7 <= r4:
                r3 = r3 + 1
                # swap
                r6 = mem[r3]
                mem[r3] = r7
                mem[r5] = r6
            r5 = r5 + 1
        r3 = r3 + 1
        r6 = mem[r3]
        mem[r2] = r6
        mem[r3] = r4
        r3 = r3 - 1
        r4 = quick_sort(r1, r3)
        r3 = r3 + 2
        r4 = quick_sort(r3, r2)
    return r1



