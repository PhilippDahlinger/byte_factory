import json

from bython_compiler.create_blueprint import blueprint_to_json, json_to_blueprint


def change_addresses(base_json, start_address=0):
    entities = base_json["blueprint"]["entities"]

    start_y = -269.5
    for y in range(573):
        current_y = start_y - y
        for entity in entities:
            if entity["name"] == "decider-combinator":
                pos = entity["position"]
                if pos["y"] == current_y:
                    # change address to y + start_address
                    entity["control_behavior"]["decider_conditions"]["conditions"][0]["constant"] = y + start_address

    return base_json


if __name__ == "__main__":
    base_blueprint = "0eNrt3ctuXMlyheF3qbHayIiMyIgU4JnfwjgQKIltE5YogaIaFhp6d5Pd7QvOwIbXZC9g5YzXqmL9JLjj21k7f7+9//T9/uvTw+Pz7e3vt4cPXx6/3d7+8++3bw//8nj36fVjj3ef729vbx/vPzx8vH/65cOXz+8fHu+evzzdfr65PTx+vP/321v7+bc3t/vH54fnh/s/v/+Pd368e/z++f3908sXvPlfbufN7euXby/f+uXx9f5ebu6X3P3m9uPljQ77h3y5n48PT/cf/vyKeHN7eZTPT18+vXt//693vz283MLLt/11u+9ePvfxj9v69vrR//ney6P69eHp2/O7//7Znn98fX1Mvz08PX9/+ch/Pcg/v+KX+fojvj4lz3evz8/O1/c+f717+uNhv7394+0/P3D/7q+bunv8eHt9Mr58f/76/fnvn8v/4/7+6fbz55v/x9d/fXj8tz8f4tcfLz/498fnd78+ffn87uHx5b5vb3+9+/Tt/uffXm7z9vXT3Y+XJ+fj/bcPTw9f/3wib3cfPz7df/v27un+7uO7v56/2+sD+Lt4DscbRPFCM95E481NFG9qxgs4XhPFc814CccronimGW/B8RZRvKEZr+B4yROvt2a8huMFUbzWjLfheJMoXmnGswHXc6J6S7QebCyTyFha1FgMRpZJhCwtiiwGK4sTKUuLKovBzOJEzNKizGKwsziRs7SosxgMLU4ELS0KLQZLixNJS4lKi8HU4kTUUqLUYrC1OJG1lKi1OGwtTmQtJWotDluLE1lLqa5nga3FiaylRK3FYWsxImspUWtx2FqMyFpK1FocthYjspYStRaHrcWIrKVErcVhazEia1mi1uKwtRiRtSxRa3HYWozIWpaotUzYWozIWpaotUzYWozIWpaotUzYWozIWpbqi4dgaxlE1rJErWXC1jKIrGWJWsuErWUQWcsStZYJW8sgspYlai0TtpZBZC0pai0TtpZBZC0pai0TtpZBZC0pai0BW8sgspYUtZaArWUQWUuKWkvA1jKIrCVFrSVQa6lNZC2peqWWgOsRWUuKWkskXI/IWlLUWmLB9YisJUWtJQquR2QtIWot0XA9ImsJUWuJDdcjspYQtZYccD0iawlRa0mD6xFZS4haSzpcj8haQtRaEraWJrKWELWWhK2liawlVC+LC1tLE1lLiFpLwtbSRNYSotaSsLU0kbVMUWtJ2FqayFqmqLUkbC09zzHn5deDh62l/RxzXl4Ptpa2c8x5eT3YWnqcY87L68HWUvscc15eD7aW6nPMeXk92Fqqzlrqy+vB1lLrrKW+vB5sLZVnLfXl9WBrqThrqS+vB1tLzbOW+vLt22BrKT9rqS+vB1tL2VlLfXk92FpqnLXUl9eDrWXts5b68nqwtaw+a6kvrwdby6qzlvryerC1rHXWUl9eD7aWlWct9eX1YGtZcdZSX14PtpZ11rVcv9s6bC3rrGu5vh5sLeusa7m+Hmwt66xrub4ebC151rVcXw+2ljzrWq6vB1tL1ql3eT3YWnKdepfXg60l89S7vB5sLXleQ3R9Pdhacp56V9fbsLWkn3qX14OtJe3Uu7webC05Tr3L68HWEvvUu7webC1xrOX6erC1xLGW6+vB1hLHWq6vB1tLHGu5vh5sLXGs5fp6sLXEsZbL69mAsSUOthDkg7UljrYQ5IO5JQ63EOSDvWUebyHIB4PLPOBCkA8Wl3nEhSAfTC7zkAtBPthc5jEXgnwwusyDLgT5YHWZR12uz2ewusyjLgT5YHWZR10I8sHqMo+6EOSD1cWPuhDkg9XFj7oQ5IPVxY+6EOSD1cWPuhDkg9XFj7oQ5IPVxY+6EOSD1cWPulyfz2F18aMuBPlgdfGjLgT5YHXxoy4E+WB1saMuBPlgdbGjLgT5YHWxoy4E+WB1saMuBPlgdbGjLgT5YHWxoy4E+WB1saMu1+ebsLrYUReCfLC62FEXgnywuthRF4J8sLqMoy4E+WB1GUddCPLB6jKOuhDkg9VlHHUhyAeryzjqQpAPVpdx1IUgH6wu46jL9fkCVpdx1IUgH6wu46gLQT5YXcZRF4J8qLqsfdSFIF/A+Y66EORLON9RF4J8C8531IUgX8H5zthOkK/hfAfNCPJtON8Z26/PlwPOd9CMIJ/B+c7YTpDP4XwHzQjywerSZ2wnyAerSx80I8gHq0ufsZ0gH6wufdCMIB+sLn3UhSAfrC591IUgH6wufdTl+nwLVpc+6kKQD1aXPupCkA9Wlz7qQpAPVpc66kKQD1aXOupCkA9WlzrqQpAPVpc66kKQD1aXOupCkA9WlzrqQpAPVpc66nJ9voLVpY66EOSD1aWOuhDkg9WljroQ5IPVZR11IcgHq8s66kKQD1aXddSFIB+sLuuoC0E+WF3WUReCfLC6rKMuBPlgdVlE6rJDNF/D6rKI1GWnaj5YXRaRumxXzQeryyJSlz1V88HqkkTqsodqPlhdkkhdtqnmg9UlidSlVQeHhtUlidSlt2o+WF2SSF1efwk188HqkkTq8vpLqJkPVpckUpdWVZcNq0sSqUurqsuG1SWJ1KVV1WXD6pJE6tKq6rJhdQkidWlVddmwugSRurSqumxYXYJIXUpVXTasLkGkLqWqLhtWlyBSl1JVlw2rSxCpS6mqy4bVJYjUpUTVxQesLkGkLpWq+WB1CSJ1KVfNB6tLEKlLTdV8sLpMInWpoZoPVpdJpC5lqvlgdZlE6rJaNR+sLpNIXdZWzQeryyRSl7VU88HqMonUZZVqPlhdJpG6LFV1MVhdJpG6LFV1MVhdJpG6LFV1MVhdJpG6LFV1MVhdnEhdlqq6GKwuTqQuS1VdDFYXJ1KXVFUXg9XFidQlVdXFYHVxInVJVXUxWF2cSF1SVV0MVhcnUpdUVReH1cWJ1CVV1cVhdXEidUlVdXFYXZxIXVJVXRxWFyNSl1RVF4fVxYjUJVXVxWF1MSJ1CVV1cVhdjEhdQlVdHFYXI1KXUFUXh9XFiNQlVNXFYXUxInUJVXWZsLoYkbqEqrpMWF2MSF1CVV0mrC5GpC6hqi4TVpdBpC6hqi4TVpdBpC6hqi4TVpdx9jAiyAery2Daw0hVXSasLoNpDyNVdZmwugymPYxU1WXC6jKYdo5WVZeA1WUw7Rytqi4Bq8tg2jlaVV0CVpfBtHO0qroEqi4vbxDlU1WXCDgf087RquoSCecjUhdXVZdYcD4idXFVdYmC8xGpi6uqSzScj0hdXFVdYsP5iNTFVdUlB5yPSF1cVV3S4HxE6uKq6pIO5yNSF1dVl4TVpYnUxVXVJWF1aSJ1cVV1SVhdmkhdTFVdElaXJlIXU1WXhNWlidTFVNUlYXVpInUxVXVJWF2aSF1MVV0WrC5NpC6mqi4LVpcmUhdTVZcFq0sTqYupqsuC1aWI1MVU1WXB6lJE6mKq6rJgdSkidVFFlwWjSxGhi6q5LNhcimkHI9V6MLkU07bRqvVgcSk/9a6uVzC4FNOFdFXrwd5S49S7vB7MLWXnqOXyerC2LCptUdWygrllMXHLUD1VVLC3LKZVLkPVywoWl8W0zGWoniwq2FwWkblsVTIrGF0W0zqXoXq2qGB2WUTsslXdpWF3WUTuslVPFzUML4sIXraqvDQsL4tIXrYqvTRML0lEL1tVXhqWlySSl60KLw3DSxLBy1Z1l4bdJZlWuqiyS8PskkTs0qrs0jC7JBG7bFV1aVhdkkhdWlVdNqwuSaQuraouG1aXJFKXVlWXDatLEqlLq6rLhtUliNSlVdVlw+oSROrSquqyYXUJppcXqarLhtUliNSlVdVlw+oSROpSquqyYXUJInVpVXXZsLoE00uMRNVlDlhdgkhdqlXzweoSROpSqZoPVpcgUpdaqvlgdZlE6lJTNR+sLpNIXSpU88HqMonUpUw1H6wuk0hdylXzweoymS7rslXzweoyma7rMlTzweoyidRlqaqLweoyidRlqaqLweoyidRlqaqLweoyma7toqouBquLE6nLUlUXg9XFidRlqaqLweriROqyVNXFYHVxInVZqupisLo4kbqkqroYrC5OpC5LVV0MVhcnUpdUVReH1cWZrqerqi4Oq4szXVBXVV0cVhcnUpdUVReH1cWI1CVV1cVhdTEidUlVdXFYXYxIXVJVXRxWFyNSl1RVF4fVxYjUJVTVxWF1MSJ1SVV1cVhdjEhdQlVdJqwuRqQuoaouE1YXI1KXUFWXCauLEalLqKrLhNVlEKlLqKrLhNVlEKlLqKrLhNVlEKlLqKrLhNVlEKlLqKrLhNVlEKnLVFWXCavLIFKXUFWXCavLIFKXqaouAavLIFKXqaouAavLIFKXqaouAavLIFKXqaougapLbCJ1marqEgHnI1KXqaoukXA+InWZquoSC85HpC5TVV2i4HxE6uKq6hIN5yNSl6mqLrHhfETq4qrqkgPOR6QurqouaXA+InVxVXVJh/MRqYurqkvC6tJE6uKq6pKwujSRuriquiSsLk2kLq6qLgmrSxOpi6uqS8Lq0kTqYqrqkrC6NJG6uKq6JKwuTaQupqouC1aXJlIXU1WXBatLE6mLqarLgtWlidTFVNVlwepSROpiquqyYHUpInUxVXVZsLoUkbqYqrosWF2KSF1MVV0WrC5FpC6q6LJgdCkidDFVdFkwuhTTxtGi9Qo2lyIyF1VyKZhciulSuqr1YHEppv2LVOvB4LKIwGXL/vHB4LKIwGXL/vXB4LKIwGWrcmfB4LKIwGWrcmfB4LKYwEWVOwsWl0UkLluVOwsWl0UkLq3qnQ2TyyIil63qnQ2byyIyl1YFz4bRZRGhS6uKZ8PqkkTq0qrq0rC6JJG6tKq6NKwuSaQuraouDatLEqlLq6pLw+qSROrSqurSsLokkbq0qro0rC7JtM5FVV02rC7JtNBFVV02rC5JpC6lqi4bVpckUpdSVZcNq0sQqUupqsuG1SWI1KVU1WXD6hJE6lKq6rJhdQkidSlVddmwugSRupSqumxYXYJIXUpVXTasLkGkLktUXWLA6hJE6lJDNR+sLkGkLqtU88HqEkwvMGrVfLC6TCJ1WamaD1aXSaQua6nmg9VlEqnLmqr5YHWZROqyQjUfrC6TSF2WqeaD1WUSqcty1XywukwidUlVdTFYXSaRuixVdTFYXSbTVV1U1cVgdZlE6pKq6mKwujiRuqSquhisLk6kLqmqLgarixOpS6qqi8Hq4kTqkqrqYrC6OJG6pKq6GKwuTqQuqaouBquLE6lLqKqLw+riROqSqurisLo4kbqEqro4rC5OpC6hqi4Oq4sRqUuoqovD6mJE6hKq6uKwuhiRuoSqujisLkakLqGqLg6rixGpS6iqi8PqYkTqEqrq4rC6GJG6TFV1mbC6GJG6hKq6TFhdjEhdpqq6TFhdjEhdpqq6TFhdBpG6TFV1mbC6DCJ1marqMmF1GUTqMlXVZcLqMojUZaqqy4TVZRCpy1RVlwmryyBSl6mqLhNWl0GkLq6qLgGryyBSl6mqLgGryyBSF1dVl4DVZRCpi6uqS6DqMjeRuriqukTA+YjUxVXVJRLORzS2u+rYHgvOR4RmropmUXA+orHdVcf2aDgfEZq5KprFhvMRqYupqksOOB+RuriquqTB+YjGdlMd29PhfERoZqpolrC6NNHYbqpje8Lq0kRoZqpolrC6NJG6mKq6JKwuTaQupqouCatLE6mLqapLwurSROpiquqSsLo00dhuqmP7gtWlidBM1cwWjC5NhC6q5rJgc2mmbb9V68HkUkyX0lWtB4tLMe1fpFoPBpdimtiH7H8+WFyKCcyG7HEnTC7FRC5D9tgFNpdiMpch+/8PRpeiQhfVo8+C1aWYlioN1TNGBbtLMS12GaqnjAqWl2Ja7TJUzxkVbC+LabnLUD1pVLC+LKb1LkP1rFHB/rKI5vetOr4XzC+LiM+2qp4VrC+LSF+2Kr4UjC+LCF+2qr0UbC+LacWE6ujeML0sIjrbqnLWsLwsInnZqvDSMLwsInjZqu7SsLsk0dy+Vcf2htklidhsq6pZw+qSROrSqurSsLokkbq0qro0rC5JpC6tqi4Nq0sSqUurqkvD6pJE6tKq6rJhdUkidWlVddmwuiTT64xU1WXD6pJE6tKq6rJhdQmisb1Vx/YNq0sQoVmrotmG1SWIxvZSHds3rC5BhGalimYbVpcgGttLdWzfsLoEEZqVKpptWF2CaGwv0bE9B6wuQYRmFar5YHUJpuuDuGo+WF2CCM1qquaD1WUSqUuZaj5YXSaRutRQzQeryyQa29dWzQeryyRCs9Wq+WB1mUTqspZqPlhdJpG6rFLNB6vLJBrbl+rYbrC6TCI0W6poZrC6TKKxfamO7QaryyRCs6WKZgarixON7Ut1bDdYXZzpsrqqaGawujjR2J6qY7vB6uJEaJaqaGawujjR2J6qY7vB6uJEaJaqaGawujjR2J6qY7vD6uJEaJaqaOawujjR2J6qY7vD6uJEaJaqaOawuhjTXkaq6uKwuhiRuqSqujisLkY0tofq2O6wuhgRmoUqmjmsLkY0tofq2O6wuhgRmoUqmjmsLkakLqGqLhNWFyNSl1BVlwmrixGpS6iqy4TVxYjUJVTVZcLqMojG9lAd2yesLoMIzUIVzSasLoNIXaaqukxYXQaRukxVdZmwugwidZmq6jJhdRlE6jJV1WXC6jKIxvapOrYHrC6DCM2mKpoFrC6DaGyfqmN7wOoyiNBsqqJZoOrim0hdpqq6RMD5iNRlqqpLJJyPSF1cVV1iwfmI1MVV1SUKzkc0trvq2B4N5yNCM1dFs9hwPiJ1cVV1yQHnI1IXV1WXNDgfkbq4qrqkw/mI1MVV1SVhdWkidXFVdUlYXZpIXVxVXRJWlyYa2011bE9YXZoIzUwVzRJWlyYa2011bE9YXZoIzUwVzRJWlyYa2011bF+wujQRmpkqmi1YXZpobDfVsX3B6tJEaGaqaLZgdSmisd1Ux/YFq0sRoZmpotmC1aWIxnbVqX3B6FJEZqZKZgs2l2LaeFi1HkwuxbT/lGo9WFyK6Uq6ovUKBpdiuqSLaj3YW4rptUWq9WBuKaZFLqr1YG1ZTOO6Qr2XB//wfP/55fPvP32///r08PKTv7n9dv/07Y/vyuU79s6oXS9Zf/78D+toZGM="
    base_json = blueprint_to_json(base_blueprint)
    # save json
    with open("temp.json", "w") as file:
        json.dump(base_json, file, indent=4)
    ys = [entity["position"]["y"] for entity in base_json["blueprint"]["entities"]]
    ys.sort()
    print(ys[0], ys[-1])
    for start_address in [1, 1 + 573, 1 + 2 * 573, 1 + 3 * 573]:
        updated_json = change_addresses(base_json, start_address=start_address)
        print(f"start_address {start_address}:")
        print(json_to_blueprint(updated_json))
    # entities = base_json["blueprint"]["entities"]
    # for entity in entities:
    #     if entity["name"] == "decider-combinator":
    #         print(entity["position"])
